{"ast":null,"code":"var _jsxFileName = \"D:\\\\Work\\\\wesourceyou2\\\\frontend\\\\src\\\\pages\\\\Jobs.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { useLanguage } from '../contexts/LanguageContext';\nimport { useSearchParams } from 'react-router-dom';\nimport './Jobs.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Jobs = () => {\n  _s();\n  const {\n    t\n  } = useLanguage();\n  const [searchParams] = useSearchParams();\n  const [jobs, setJobs] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n  const [filteredJobs, setFilteredJobs] = useState([]);\n  useEffect(() => {\n    const fetchJobs = async () => {\n      try {\n        setLoading(true);\n        setError(null);\n        const response = await fetch('http://localhost:3001/jobs');\n        if (!response.ok) {\n          throw new Error(`HTTP error! status: ${response.status}`);\n        }\n        const data = await response.json();\n        setJobs(data);\n      } catch (error) {\n        console.error('Error fetching jobs:', error);\n        setError('Failed to load jobs');\n      } finally {\n        setLoading(false);\n      }\n    };\n    fetchJobs();\n  }, []);\n  useEffect(() => {\n    if (jobs.length > 0) {\n      let filtered = [...jobs];\n\n      // Filter by company if specified\n      const companyId = searchParams.get('company');\n      if (companyId) {\n        filtered = filtered.filter(job => {\n          var _job$company;\n          return ((_job$company = job.company) === null || _job$company === void 0 ? void 0 : _job$company.id) === parseInt(companyId);\n        });\n      }\n\n      // Filter by specific job if specified\n      const jobId = searchParams.get('jobId');\n      if (jobId) {\n        filtered = filtered.filter(job => job.id === parseInt(jobId));\n      }\n      setFilteredJobs(filtered);\n    }\n  }, [jobs, searchParams]);\n  if (loading) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"loading\",\n      children: t('common.loading')\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 12\n    }, this);\n  }\n  if (error) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"error\",\n      children: error\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 12\n    }, this);\n  }\n  const companyName = searchParams.get('companyName');\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"jobs-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"jobs-header\",\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: companyName ? `${t('jobs.title')} - ${companyName}` : t('jobs.title')\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: t('jobs.subtitle')\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 75,\n        columnNumber: 9\n      }, this), companyName && /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"company-filter-notice\",\n        children: [t('jobs.showingJobsFor'), \": \", companyName]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 77,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"jobs-list\",\n      children: filteredJobs.length > 0 ? filteredJobs.map(job => {\n        var _job$company2;\n        return /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"job-card\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"job-header\",\n            children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n              children: job.title\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 88,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n              className: \"job-type\",\n              children: job.jobType\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 89,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 87,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"job-company\",\n            children: ((_job$company2 = job.company) === null || _job$company2 === void 0 ? void 0 : _job$company2.name) || 'Unknown Company'\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 91,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"job-location\",\n            children: job.location\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 92,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"job-salary\",\n            children: job.salary && typeof job.salary === 'object' ? `${job.salary.currency || 'USD'} ${job.salary.min || 0} - ${job.salary.max || 0}` : job.salary || 'Salary not specified'\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 93,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            className: \"job-description\",\n            children: job.description\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 99,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"job-footer\",\n            children: [/*#__PURE__*/_jsxDEV(\"span\", {\n              className: \"job-date\",\n              children: [t('jobs.posted'), \": \", new Date(job.createdAt).toLocaleDateString()]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 101,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n              className: \"apply-button\",\n              children: t('jobs.applyNow')\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 102,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 100,\n            columnNumber: 15\n          }, this)]\n        }, job.id, true, {\n          fileName: _jsxFileName,\n          lineNumber: 86,\n          columnNumber: 13\n        }, this);\n      }) : /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"no-jobs\",\n        children: /*#__PURE__*/_jsxDEV(\"p\", {\n          children: t('jobs.noJobsFound')\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 108,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 107,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 70,\n    columnNumber: 5\n  }, this);\n};\n_s(Jobs, \"pMSU7ghJvMsT1LiwugtNeL/KD8I=\", false, function () {\n  return [useLanguage, useSearchParams];\n});\n_c = Jobs;\nexport default Jobs;\nvar _c;\n$RefreshReg$(_c, \"Jobs\");","map":{"version":3,"names":["React","useState","useEffect","useLanguage","useSearchParams","jsxDEV","_jsxDEV","Jobs","_s","t","searchParams","jobs","setJobs","loading","setLoading","error","setError","filteredJobs","setFilteredJobs","fetchJobs","response","fetch","ok","Error","status","data","json","console","length","filtered","companyId","get","filter","job","_job$company","company","id","parseInt","jobId","className","children","fileName","_jsxFileName","lineNumber","columnNumber","companyName","map","_job$company2","title","jobType","name","location","salary","currency","min","max","description","Date","createdAt","toLocaleDateString","_c","$RefreshReg$"],"sources":["D:/Work/wesourceyou2/frontend/src/pages/Jobs.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport { useLanguage } from '../contexts/LanguageContext';\r\nimport { useSearchParams } from 'react-router-dom';\r\nimport './Jobs.css';\r\n\r\nconst Jobs = () => {\r\n  const { t } = useLanguage();\r\n  const [searchParams] = useSearchParams();\r\n  const [jobs, setJobs] = useState([]);\r\n  const [loading, setLoading] = useState(true);\r\n  const [error, setError] = useState(null);\r\n  const [filteredJobs, setFilteredJobs] = useState([]);\r\n\r\n  useEffect(() => {\r\n    const fetchJobs = async () => {\r\n      try {\r\n        setLoading(true);\r\n        setError(null);\r\n        \r\n        const response = await fetch('http://localhost:3001/jobs');\r\n        \r\n        if (!response.ok) {\r\n          throw new Error(`HTTP error! status: ${response.status}`);\r\n        }\r\n        \r\n        const data = await response.json();\r\n        setJobs(data);\r\n      } catch (error) {\r\n        console.error('Error fetching jobs:', error);\r\n        setError('Failed to load jobs');\r\n      } finally {\r\n        setLoading(false);\r\n      }\r\n    };\r\n\r\n    fetchJobs();\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    if (jobs.length > 0) {\r\n      let filtered = [...jobs];\r\n\r\n      // Filter by company if specified\r\n      const companyId = searchParams.get('company');\r\n      if (companyId) {\r\n        filtered = filtered.filter(job => job.company?.id === parseInt(companyId));\r\n      }\r\n\r\n      // Filter by specific job if specified\r\n      const jobId = searchParams.get('jobId');\r\n      if (jobId) {\r\n        filtered = filtered.filter(job => job.id === parseInt(jobId));\r\n      }\r\n\r\n      setFilteredJobs(filtered);\r\n    }\r\n  }, [jobs, searchParams]);\r\n\r\n  if (loading) {\r\n    return <div className=\"loading\">{t('common.loading')}</div>;\r\n  }\r\n\r\n  if (error) {\r\n    return <div className=\"error\">{error}</div>;\r\n  }\r\n\r\n  const companyName = searchParams.get('companyName');\r\n\r\n  return (\r\n    <div className=\"jobs-container\">\r\n      <div className=\"jobs-header\">\r\n        <h1>\r\n          {companyName ? `${t('jobs.title')} - ${companyName}` : t('jobs.title')}\r\n        </h1>\r\n        <p>{t('jobs.subtitle')}</p>\r\n        {companyName && (\r\n          <p className=\"company-filter-notice\">\r\n            {t('jobs.showingJobsFor')}: {companyName}\r\n          </p>\r\n        )}\r\n      </div>\r\n\r\n      <div className=\"jobs-list\">\r\n        {filteredJobs.length > 0 ? (\r\n          filteredJobs.map(job => (\r\n            <div key={job.id} className=\"job-card\">\r\n              <div className=\"job-header\">\r\n                <h3>{job.title}</h3>\r\n                <span className=\"job-type\">{job.jobType}</span>\r\n              </div>\r\n              <div className=\"job-company\">{job.company?.name || 'Unknown Company'}</div>\r\n              <div className=\"job-location\">{job.location}</div>\r\n              <div className=\"job-salary\">\r\n                {job.salary && typeof job.salary === 'object' \r\n                  ? `${job.salary.currency || 'USD'} ${job.salary.min || 0} - ${job.salary.max || 0}`\r\n                  : job.salary || 'Salary not specified'\r\n                }\r\n              </div>\r\n              <p className=\"job-description\">{job.description}</p>\r\n              <div className=\"job-footer\">\r\n                <span className=\"job-date\">{t('jobs.posted')}: {new Date(job.createdAt).toLocaleDateString()}</span>\r\n                <button className=\"apply-button\">{t('jobs.applyNow')}</button>\r\n              </div>\r\n            </div>\r\n          ))\r\n        ) : (\r\n          <div className=\"no-jobs\">\r\n            <p>{t('jobs.noJobsFound')}</p>\r\n          </div>\r\n        )}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Jobs;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}